{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","key","getRandomCoordinates","Math","floor","random","initialState","food","speed","score","direction","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enLargeSnake","increaseSpeed","newSnake","unshift","alert","Snake","Food","color","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b79a826.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map ((dot, i) => {\r\n                const style = {\r\n                    left: `${dot[0]}%`,\r\n                    top: `${dot[1]}%`\r\n                }\r\n                return(\r\n                    <div className='snake-dot' key={i} style={style}></div>\r\n                )\r\n            })}\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const style = {\r\n    left: `${props.dot[0]}%`,\r\n    top: `${props.dot[1]}%`,\r\n  };\r\n  return (\r\n  <div className='snake-food' style={style}></div>\r\n  )\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Snake from \"./Snake\";\r\nimport Food from \"./Food\";\r\n// import bungSound from './my-sounds/tone.mp3';\r\n// import UIFx from \"uifx\";\r\n\r\n// const bung = new UIFx({asset: bungSound});\r\n\r\nconst getRandomCoordinates = () => {\r\n  let min = 1;\r\n  let max = 98;\r\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  return [x, y];\r\n};\r\n\r\nconst initialState = {\r\n  food: getRandomCoordinates(),\r\n  speed: 200,\r\n  score: 0,\r\n  direction: \"RIGHT\",\r\n  snakeDots: [\r\n    [0, 0],\r\n    [2, 0],\r\n  ],\r\n};\r\n\r\nclass App extends Component {\r\n  state = initialState;\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkIfOutOfBorders();\r\n    this.checkIfCollapsed();\r\n    this.checkIfEat();\r\n  }\r\n\r\n  onKeyDown = (e) => {\r\n    e = e || window.event;\r\n    switch (e.keyCode) {\r\n      case 38:\r\n        this.setState({ direction: \"UP\" });\r\n        break;\r\n      case 40:\r\n        this.setState({ direction: \"DOWN\" });\r\n        break;\r\n      case 37:\r\n        this.setState({ direction: \"LEFT\" });\r\n        break;\r\n      case 39:\r\n        this.setState({ direction: \"RIGHT\" });\r\n        break;\r\n      default:\r\n        // code\r\n    }\r\n  };\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeDots];\r\n    let head = dots[dots.length - 1];\r\n    switch (this.state.direction) {\r\n      case \"RIGHT\":\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case \"LEFT\":\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case \"DOWN\":\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case \"UP\":\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n      default:\r\n        // code\r\n        \r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakeDots: dots,\r\n    });\r\n  };\r\n\r\n  checkIfOutOfBorders() {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\r\n      this.onGameOver();\r\n    }\r\n  }\r\n\r\n  checkIfCollapsed() {\r\n    let snake = [...this.state.snakeDots];\r\n    let head = snake[snake.length - 1];\r\n    snake.pop();\r\n    snake.forEach((dot) => {\r\n      if (head[0] === dot[0] && head[1] === dot[1]) {\r\n        this.onGameOver();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkIfEat() {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let food = this.state.food;\r\n    if (head[0] === food[0] && head[1] === food[1]) {\r\n      this.setState({\r\n        food: getRandomCoordinates(),\r\n      });\r\n      this.enLargeSnake();\r\n      this.increaseSpeed();\r\n    }\r\n  }\r\n\r\n  enLargeSnake() {\r\n    let newSnake = [...this.state.snakeDots];\r\n    newSnake.unshift([]);\r\n    this.setState({\r\n      snakeDots: newSnake,\r\n      score: this.state.score + 1,\r\n    });\r\n  }\r\n\r\n  increaseSpeed() {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed - 10,\r\n      });\r\n    }\r\n  }\r\n\r\n  onGameOver() {\r\n    alert(`Game Over, Snake Length is ${this.state.snakeDots.length}`);\r\n    this.setState(initialState);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <div className='game-area left'>\r\n          <Snake snakeDots={this.state.snakeDots} />\r\n          <Food dot={this.state.food} />\r\n        </div>\r\n        <div className='text-area'>\r\n          <p>\r\n            score : <spin style={{ color: \"#FFC300\" }}>{this.state.score}</spin>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}